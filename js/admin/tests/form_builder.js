// Generated by CoffeeScript 1.4.0
var Answer, FormBuilder;

FormBuilder = (function() {

  FormBuilder.prototype.qestion = {
    answers: 1,
    type: 'radio'
  };

  function FormBuilder(form) {
    this.form = form;
    this._detectElements();
    this._bindEvents();
  }

  FormBuilder.prototype._detectElements = function() {
    this.controls = {
      qestionType: this.form.find('#qestion_type'),
      answers_count: this.form.find('#answers_count'),
      submit: this.form.find('input[type=submit]')
    };
    return this.elemets = {
      answers_container: this.form.find('#answers_container')
    };
  };

  FormBuilder.prototype._bindEvents = function() {
    var _this = this;
    this.controls.qestionType.change(function(e) {
      _this.setQestionType($(e.currentTarget).find('option:selected').val());
      return _this.renderAnswers();
    });
    this.controls.answers_count.change(function(e) {
      _this.setQestionAnswersCount($(e.currentTarget).find('option:selected').val());
      return _this.renderAnswers();
    });
    return this.controls.submit.click(function(e) {
      _this._saveData();
      return false;
    });
  };

  FormBuilder.prototype._saveData = function(data) {
    return $.ajax({
      url: "" + SYS.baseUrl + "admin/tests/save_qestion",
      type: "POST",
      data: this.form.serialize(),
      dataType: 'json',
      success: function(res) {
        console.log(res);
        return Alert.factory().setMessage("Question has been successfully saved!").render();
      }
    });
  };

  FormBuilder.prototype.setQestionAnswersCount = function(count) {
    this.qestion.answers = count;
    return this;
  };

  FormBuilder.prototype.setQestionType = function(type) {
    this.qestion.type = type;
    return this;
  };

  FormBuilder.prototype.renderAnswers = function() {
    var answer, i, resHTML;
    resHTML = '';
    this.qestion.answers;
    i = 0;
    while (i < this.qestion.answers) {
      i++;
      answer = new Answer({
        id: i
      });
      resHTML += answer.el;
    }
    return this.elemets.answers_container.html(resHTML);
  };

  return FormBuilder;

})();

Answer = (function() {

  Answer.prototype.template = JST['answer'];

  function Answer(obj) {
    this.el = this.template(obj);
  }

  return Answer;

})();
